// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketSalesCurs;

#nullable disable

namespace TicketSalesCurs.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20221128120434_updateColumn")]
    partial class updateColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicketSalesCurs.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FilmId"));

                    b.Property<DateTime>("FilmDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilmName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("infoFilm")
                        .HasColumnType("int");

                    b.HasKey("FilmId");

                    b.HasIndex("infoFilm");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("TicketSalesCurs.MovieViewed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FilmsIdFilmId")
                        .HasColumnType("int");

                    b.Property<int>("UsersIdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilmsIdFilmId");

                    b.HasIndex("UsersIdId");

                    b.ToTable("Vieweds");
                });

            modelBuilder.Entity("TicketSalesCurs.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("infoUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("infoUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TicketSalesCurs.Film", b =>
                {
                    b.HasOne("TicketSalesCurs.MovieViewed", null)
                        .WithMany("Films")
                        .HasForeignKey("infoFilm");
                });

            modelBuilder.Entity("TicketSalesCurs.MovieViewed", b =>
                {
                    b.HasOne("TicketSalesCurs.Film", "FilmsId")
                        .WithMany()
                        .HasForeignKey("FilmsIdFilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketSalesCurs.User", "UsersId")
                        .WithMany()
                        .HasForeignKey("UsersIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilmsId");

                    b.Navigation("UsersId");
                });

            modelBuilder.Entity("TicketSalesCurs.User", b =>
                {
                    b.HasOne("TicketSalesCurs.MovieViewed", null)
                        .WithMany("Users")
                        .HasForeignKey("infoUser");
                });

            modelBuilder.Entity("TicketSalesCurs.MovieViewed", b =>
                {
                    b.Navigation("Films");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
